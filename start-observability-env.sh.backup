#!/bin/bash

# JobPulse Environment-Specific Observability Startup Script
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Default environment
ENVIRONMENT=${1:-dev}

# Validate environment
if [[ ! "$ENVIRONMENT" =~ ^(dev|test|prod)$ ]]; then
    echo -e "${RED}‚ùå Invalid environment: $ENVIRONMENT${NC}"
    echo "Usage: $0 [dev|test|prod]"
    exit 1
fi

ENVIRONMENT_UPPER=$(echo "$ENVIRONMENT" | tr '[:lower:]' '[:upper:]')
echo -e "${BLUE}üöÄ Starting JobPulse Observability Stack for ${CYAN}${ENVIRONMENT_UPPER}${BLUE} environment...${NC}"

# Function to check if a service is ready
check_service() {
    local service_name=$1
    local url=$2
    local max_attempts=30
    local attempt=1

    echo -e "${YELLOW}Waiting for $service_name to be ready...${NC}"
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s "$url" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ $service_name is ready!${NC}"
            return 0
        fi
        
        echo -n "."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    echo -e "${RED}‚ùå $service_name failed to start within timeout${NC}"
    return 1
}

# Set environment-specific configurations
case $ENVIRONMENT in
    "dev")
        COMPOSE_FILE="docker-compose.observability.dev.yml"
        PROMETHEUS_PORT="9090"
        GRAFANA_PORT="3000"
        JAEGER_PORT="16686"
        GRAFANA_PASSWORD="jobpulse-dev-123"
        ;;
    "test")
        COMPOSE_FILE="docker-compose.observability.test.yml"
        PROMETHEUS_PORT="9091"
        GRAFANA_PORT="3001"
        JAEGER_PORT="16687"
        GRAFANA_PASSWORD="jobpulse-test-456"
        ;;
    "prod")
        COMPOSE_FILE="docker-compose.observability.prod.yml"
        PROMETHEUS_PORT="9092"
        GRAFANA_PORT="3002"
        JAEGER_PORT="16688"
        GRAFANA_PASSWORD="${GRAFANA_ADMIN_PASSWORD:-secure-prod-password}"
        ;;
esac

# Create the jobpulse network if it doesn't exist
echo -e "${YELLOW}Creating network if needed...${NC}"
docker network create jobpulse-network 2>/dev/null || true

# Start the environment-specific observability stack
echo -e "${BLUE}Starting ${ENVIRONMENT} observability services...${NC}"
docker-compose -f "$COMPOSE_FILE" up -d

# Wait for services to be ready
echo -e "${YELLOW}Checking service health...${NC}"

# Environment-specific health checks
case $ENVIRONMENT in
    "dev")
        check_service "Prometheus (Dev)" "http://localhost:$PROMETHEUS_PORT/-/ready"
        check_service "Grafana (Dev)" "http://localhost:$GRAFANA_PORT/api/health"
        check_service "Jaeger (Dev)" "http://localhost:$JAEGER_PORT/"
        ;;
    "test")
        check_service "Prometheus (Test)" "http://localhost:$PROMETHEUS_PORT/-/ready"
        check_service "Grafana (Test)" "http://localhost:$GRAFANA_PORT/api/health"
        check_service "Jaeger (Test)" "http://localhost:$JAEGER_PORT/"
        ;;
    "prod")
        check_service "Prometheus (Prod)" "http://localhost:$PROMETHEUS_PORT/-/ready"
        check_service "Grafana (Prod)" "http://localhost:$GRAFANA_PORT/api/health"
        check_service "Jaeger (Prod)" "http://localhost:$JAEGER_PORT/"
        ;;
esac

echo -e "${GREEN}üéâ ${ENVIRONMENT_UPPER} observability services are ready!${NC}"
echo ""
echo -e "${BLUE}Environment: ${CYAN}${ENVIRONMENT_UPPER}${NC}"
echo -e "${BLUE}Access URLs:${NC}"
echo "üìä Grafana Dashboard: http://localhost:$GRAFANA_PORT (admin/$GRAFANA_PASSWORD)"
echo "üìà Prometheus: http://localhost:$PROMETHEUS_PORT"
echo "üîç Jaeger Tracing: http://localhost:$JAEGER_PORT"
echo ""

# Environment-specific next steps
case $ENVIRONMENT in
    "dev")
        echo -e "${YELLOW}Development Environment Next Steps:${NC}"
        echo "1. Start your microservices: make up ENV=dev"
        echo "2. Set environment: export OBSERVABILITY_ENV=dev"
        echo "3. Generate test traffic: ./scripts/load-test.sh"
        echo "4. Monitor in real-time: ./scripts/monitor.sh"
        ;;
    "test")
        echo -e "${YELLOW}Test Environment Next Steps:${NC}"
        echo "1. Start test services: make up ENV=test"
        echo "2. Set environment: export OBSERVABILITY_ENV=test"
        echo "3. Run automated tests: make test"
        echo "4. Validate observability: ./scripts/validate-observability.sh test"
        ;;
    "prod")
        echo -e "${YELLOW}Production Environment Next Steps:${NC}"
        echo "1. Ensure production services are running"
        echo "2. Set environment: export OBSERVABILITY_ENV=prod"
        echo "3. Configure alerting: Review prometheus alerts"
        echo "4. Monitor system health: ./scripts/monitor.sh prod"
        echo ""
        echo -e "${RED}‚ö†Ô∏è  Production Security Reminders:${NC}"
        echo "‚Ä¢ Change default passwords"
        echo "‚Ä¢ Configure SSL/TLS"
        echo "‚Ä¢ Set up proper authentication"
        echo "‚Ä¢ Configure network security"
        ;;
esac
