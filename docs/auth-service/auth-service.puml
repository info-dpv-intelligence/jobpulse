@startuml auth-service-design
title JobPulse Auth Service 

package dto {
    package response {
        class ControllerResponse {
            +boolean status
            +Integer code
            +String message
            +T data
        }
        class AccessToken {
            +String token
        }
        
        class RefreshToken {
            +String token
        }

        class TokenResponse {
            +String accessToken
            +String refreshToken
        }
        class LoginResponse {
            TokenResponse tokens
        }
        class RegisterResponse {
            UUID id
        }
    }
    package request {
        class RegisterRequest {
            +email: String
            +password: String
            +role: UserRole
        }
        
        class LoginRequest {
            +email: String
            +password: String
        }
        class RegisteringUserAction {
            +email: String
            +password: String
            +role: UserRole
        }
        class GenerateTokenRequest {
            +UUID userId
            +String email
            +List<String> roles
        }

        class RefreshTokenRequest {
            +UUID userId
            +String oldToken
        }
    }
}

package exception {
    abstract class BaseDomainException extends RuntimeException {
        +BaseDomainException(String message)
    }

    class UserNotFoundException extends BaseDomainException {
        +UserNotFoundException(String email)
    }

    class InvalidCredentialsException extends BaseDomainException {
        +InvalidCredentialsException()
    }
}
package config {
    package controller {
        annotation @RestControllerAdvice
        class GlobalExceptionHandler {
            +ControllerResponse handleUserNotFound(UserNotFoundException)
            +ControllerResponse handleInvalidCredentials(InvalidCredentialsException)
            +ControllerResponse handleGenericException(Exception)
        }
    }
}

package model {
    package enum {
        enum UserRole {
            ADMIN
            CANDIDATE_SEEKER
            JOB_SEEKER
        }
    }
    class UserEvent {
        -eventType: EventType
        -userId: String
        -email: String
        +{static} created(String userId, String email): UserEvent
        +{static} updated(String userId, String email): UserEvent
    }
    enum EventType {
        USER_CREATED
        USER_UPDATED
        USER_DELETED
    }
}

package controller {
    class AuthController {
        -userService: UserServiceContract
        +ControllerResponse<RegisterResponse> register(RegisterRequest request)
        +ControllerResponse<LoginResponse> login(LoginRequest request)
    }
}

package service {
    package user {
        package password {
            interface PasswordServiceContract {
                String encode(String rawPassword);
                boolean matches(String rawPassword, String encodedPassword);
            }

            class PasswordService implements PasswordServiceContract {
            }
        }
        package jwt {
            interface JwtServiceContract {
                +TokenResponse generateToken(GenerateTokenRequest request)
                -RefreshToken generateRefreshToken(RefreshTokenRequest request)
                -boolean revokeAllRefreshTokens(RefreshTokenRequest request)
            }
            class JwtService implements JwtServiceContract {}
        }

        package event {
            interface UserDomainEventLayerContract {
                +User registeringUser(RegisteringUserAction action);
                +void raiseEvent(DomainEvent event);
                +void clearEvents();
                +boolean hasEvents();
                +List<DomainEvent> domainEvents();
                +void clearDomainEvents();
                +void publishEvents();
                +void rollback();
            }
            class UserDomainEventLayer implements UserDomainEventLayerContract {}
        }

        interface UserServiceContract {
            +RegisterResponse registerUser(RegisterRequest request)
            +LoginResponse login(LoginRequest request)
        }

        class UserService implements UserServiceContract {
        }
    }
}

package repository {
    package user {
        interface UserRepository {}
    }
}

package domain {
    class User {
        +id: UUID
        +email: String
        +password: String
        +role: UserRole
    }
}

AuthController --> UserServiceContract


UserService --> UserRepository
UserService --> JwtServiceContract
UserService --> UserDomainEventLayerContract
UserService --> PasswordServiceContract

UserDomainEventLayerContract --> User
@enduml