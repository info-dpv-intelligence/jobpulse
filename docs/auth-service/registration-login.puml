@startuml registration-login-flow
title User Registration & Login Flow

actor "User" as User
participant "AuthController" as Controller
participant "UserService" as Service
participant "UserRepository" as Repository
participant "JwtService" as JwtService
participant "UserEventProducer" as EventProducer
participant "BCryptPasswordEncoder" as Encoder
database "PostgreSQL" as DB
queue "Kafka" as Kafka

group Registration Flow
    User -> Controller : POST /auth/register\n{email, password, role}
    Controller -> Service : registerUser(RegisterRequest)
    Service -> Repository : existsByEmail(email)
    Repository -> DB : SELECT * FROM users WHERE email = ?
    Repository --> Service : false
    Service -> Encoder : encode(password)
    Encoder --> Service : hashedPassword
    Service -> Repository : save(user)
    Repository -> DB : INSERT INTO users...
    Repository --> Service : savedUser
    Service -> EventProducer : sendUserEvent(UserEvent.created())
    EventProducer -> Kafka : publish UserCreatedEvent
    Service --> Controller : ServiceResult.success(UserRegistrationResponse)
    Controller --> User : 200 OK\n{userId, message}
end

group Login Flow
    User -> Controller : POST /auth/login\n{email, password}
    Controller -> Service : login(LoginRequest)
    Service -> Repository : findByEmail(email)
    Repository -> DB : SELECT * FROM users WHERE email = ?
    Repository --> Service : user
    Service -> Encoder : matches(rawPassword, hashedPassword)
    Encoder --> Service : true
    Service -> JwtService : generateToken(GenerateTokenRequest)
    JwtService --> Service : accessToken
    Service -> JwtService : revokeAllRefreshTokens(userId)
    Service -> JwtService : generateRefreshToken(userId)
    JwtService --> Service : refreshToken
    Service --> Controller : ServiceResult.success(AuthResponse)
    Controller --> User : 200 OK\n{accessToken, refreshToken}
end

group Error Handling
    User -> Controller : POST /auth/register\n{duplicate email}
    Controller -> Service : registerUser(RegisterRequest)
    Service -> Repository : existsByEmail(email)
    Repository --> Service : true
    Service --> Controller : ServiceResult.failure("Email exists", "EMAIL_EXISTS")
    Controller --> User : 400 Bad Request\n{error, code}
end

@enduml