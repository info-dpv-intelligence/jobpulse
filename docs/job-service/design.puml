@startuml job-service-architecture
!theme plain
skinparam class {
    BackgroundColor LightGreen
    BorderColor Black
    ArrowColor Black
}

title JobPulse Job Service Architecture

package JobServicePackage {
    package "com.jobpulse.jobpostsandapply" {
        package controller {
            class JobPostAndApplyController {}
        }
        package dto {
            package repository {
                package command {
                    class CreateJobPostCommand
                }
                package response {
                    class OperationResult<T> {

                    }
                    class CreateJobPostResponse 
                }

            }
            package request {
                class CreateJobPostRequests
                class ApplyToJobRequest
            }
            package response {
                class ServiceResult<T> {
                    -success: boolean
                    -data: T
                    -errorMessage: String
                    -errorCode: String
                    +{static} success(T): ServiceResult<T>
                    +{static} failure(String, String): ServiceResult<T>
                    +isSuccess(): boolean
                    +isFailure(): boolean
                }
                class CreateJobPostResponse
                class ApplyToJobResponse
                class JobListingsResponse
            }
        }
        package enum {
            enum ApplicationDocumentType {
                RESUME
                COVER
                OTHER
            }
        }
        package event {
            class JobApplicantSentEvent {
                +jobApplicationId: UUID
                +jobPostId: UUID
                +jobApplicantId: UUID
                +createdAt: LocalDateTime
                +updatedById: UUID
            }
            class JobPostCreatedEvent {
                +jobPostId: UUID
                +createdAt: LocalDateTime
                +updatedById: UUID
            }
        }
        package repository {
            interface JobPostAndApplicationRepository {
                +createJobPost(CreateJobPostCommand command): OperationResult<CreateJobPostResponse>;
            }
        }
        package service {
            interface JobPostAndApplicationContract  {
                +getJobListings(): ServiceResult<JobListingsResponse>
                +createJob(CreateJobPostRequest): ServiceResult<CreateJobPostResponse>
                +applyJob(ApplyToJobRequest): ServiceResult<ApplyToJobResponse>
            }
            class JobPostAndApplicationService implements JobPostAndApplicationContract {

            }
        }

        JobPostAndApplyController --> JobPostAndApplicationContract
        JobPostAndApplicationContract <|.. JobPostAndApplicationService
        JobPostAndApplicationService --> JobPostAndApplicationRepository
    }
    package "com.jobpulse.jobposter" {
        package controller {
            class JobPosterController {
            }
        }
        package enum {
            enum ActiveJobPostStatusUpdate {
                FILLED
                HOLD
                CLOSE
            }
        }
        package dto {
            package request {
                class JobPostsRequest
                class JobPostApplicationsRequest
            }
            package response {
                class ServiceResult<T> {
                    -success: boolean
                    -data: T
                    -errorMessage: String
                    -errorCode: String
                    +{static} success(T): ServiceResult<T>
                    +{static} failure(String, String): ServiceResult<T>
                    +isSuccess(): boolean
                    +isFailure(): boolean
                }
                class JobPostsResponse
                class JobPostApplicationsResponse
            }
        }
        package event {
            class JobPostStausUpdateEvent {
                +jobPostId: UUID
                +jobApplicantionId: UUID
                +jobApplicantId: UUID
                +updatedById: UUID
            }
        }
        package repository {
            interface JobPosterRepository 
        }
        package service {
            interface JobPosterContract {
                +getJobPostsByPoster(JobPostsRequest): ServiceResult<JobPostsResponse>
                +editJobPostStatus(EditJobPostStatusRequest): ServiceResult<EditJobPostStatusResponse>
                +getJobPostApplications(JobPostApplicationsRequest): ServiceResult<JobPostApplicationsResponse>
            }
            class JobPosterService implements JobPosterContract {
            }
        }
        JobPosterController --> JobPosterContract
        JobPosterContract <|.. JobPosterService
        JobPostService --> JobPosterRepository
    }
    package "com.jobpulse.jobapplicant" {
        package controller {
            class JobApplicantController {
            }
        }
        package dto {
            package request {
                class JobPostsRequest
                class JobPostApplicationsRequest
                class UpdateAppliedJobStatusRequest
            }
            package response {
                class ServiceResult<T> {
                    -success: boolean
                    -data: T
                    -errorMessage: String
                    -errorCode: String
                    +{static} success(T): ServiceResult<T>
                    +{static} failure(String, String): ServiceResult<T>
                    +isSuccess(): boolean
                    +isFailure(): boolean
                }
                class JobPostsResponse
                class JobPostApplicationsResponse
                class UpdateAppliedJobStatusResponse
            }
        }
        package event {
            class AppliedJobApplicationStausUpdateEvent {
                +jobPostId: UUID
                +jobApplicantionId: UUID
                +jobApplicantId: UUID
                +updatedById: UUID
            }
            class AppliedJobApplicationDocumentUpdatedEvent {
                +jobPostId: UUID
                +jobApplicantionId: UUID
                +jobApplicantId: UUID
                +jobApplicationFileId: UUID
                +updatedById: UUID
            }
        }
        package repository {
            interface JobApplicantRepository 
        }
        package service {
            interface JobApplicantContract {
                +getAppliedJobs(request: GetAppliedJobsRequest): ServiceResult<AppliedJobsResponse>
                +editAppliedJobDocument(request: EditAppliedJobDocumentRequest): ServiceResult<EditAppliedJobDocumentResponse>
                +updateAppliedJobStatus(request: UpdateAppliedJobStatusRequest): ServiceResult<UpdateAppliedJobStatusResponse>
            }
            class JobApplicantService implements JobApplicantContract {
            }
        }
        JobApplicantController --> JobApplicantContract
        JobApplicantContract <|.. JobApplicantService
        JobApplicantService --> JobApplicantRepository
    }
}
note top of JobServicePackage
  The JobServicePackage currently hosts the following modules:
    - job-posts-and-apply: handles job CRUD and applications
    - job-poster: manages job posts and reviews applications
    - job-applicant: manages applicant profiles and applications
  Each module is independent, relies only on contracts, and can be deployed as a separate microservice for scalability.
end note
@enduml