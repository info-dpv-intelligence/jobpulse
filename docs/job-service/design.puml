@startuml job-service-architecture
!theme plain
skinparam class {
    BackgroundColor LightGreen
    BorderColor Black
    ArrowColor Black
}

title JobPulse Job Service Architecture

package "Controllers" {
    class JobServiceController {
        -jobService: JobServiceContract
        +getJobListings(Pageable, Jwt): ResponseEntity<?>
        +createJob(CreateJobPostRequest, Jwt): ResponseEntity<?>
    }
    
    class PingController {
        +ping(): String
        +protectedPing(): String
    }
}

package "Services" {
    interface JobServiceContract {
        +getJobListings(Pageable): ServiceResult<JobListingsResponse>
        +createJob(CreateJobPostCommand): ServiceResult<CreatedResponse>
    }
    
    class JobService {
        -jobPostRepository: JobPostRepository
        +getJobListings(Pageable): ServiceResult<JobListingsResponse>
        +createJob(CreateJobPostCommand): ServiceResult<CreatedResponse>
    }
}

package "Repositories" {
    interface JobPostRepository {
        +findAll(Pageable): Page<JobPost>
        +save(JobPost): JobPost
    }
    
    interface JobApplicationRepository {
        +save(JobApplication): JobApplication
        +findByJobPostId(UUID): List<JobApplication>
    }
    
    interface ApplicationFilesRepository {
        +save(ApplicationFiles): ApplicationFiles
        +findByJobApplicationId(UUID): List<ApplicationFiles>
    }
}

package "Domain" {
    class JobPost {
        +id: UUID
        +title: String
        +description: String
        +jobPosterId: UUID
        +createdAt: LocalDateTime
        +updatedAt: LocalDateTime
        +isActive: Boolean
    }
    
    class JobApplication {
        +id: UUID
        +jobPostId: UUID
        +jobApplicantId: UUID
        +status: ApplicationStatus
        +appliedAt: LocalDateTime
        +updatedAt: LocalDateTime
    }
    
    class ApplicationFiles {
        +id: UUID
        +jobApplicationId: UUID
        +fileName: String
        +fileType: ApplicationFileType
        +uploadedAt: LocalDateTime
    }
    
    enum ApplicationStatus {
        APPLIED
        REVIEWED
        REJECTED
    }
    
    enum ApplicationFileType {
        RESUME
        COVER
        OTHER
    }
    
    enum UserRole {
        ADMIN
        JOB_POSTER
        JOB_APPLICANT
    }
}

package "DTOs" {
    class "ServiceResult<T>" {
        -success: boolean
        -data: T
        -errorMessage: String
        -errorCode: String
        +{static} success(T): ServiceResult<T>
        +{static} failure(String, String): ServiceResult<T>
        +isSuccess(): boolean
        +isFailure(): boolean
    }
    
    class CreateJobPostRequest {
        +title: String
        +description: String
    }
    
    class CreateJobPostCommand {
        +title: String
        +description: String
        +jobPosterId: UUID
    }
    
    class JobListingsResponse {
        +jobs: List<JobPost>
        +totalElements: long
        +totalPages: int
        +{static} from(Page<JobPost>): JobListingsResponse
    }
    
    class CreatedResponse {
        +id: String
        +message: String
    }
    
    class UserContext {
        +userId: UUID
        +role: UserRole
        +email: String
    }
}

package "Configuration" {
    class SecurityConfig {
        +filterChain(HttpSecurity): SecurityFilterChain
        +jwtAuthenticationConverter(): JwtAuthenticationConverter
    }
    
    class OpenApiConfig {
        +openAPI(): OpenAPI
    }
}

JobServiceController --> JobServiceContract : uses
JobService ..|> JobServiceContract : implements
JobService --> JobPostRepository : uses

JobServiceController --> CreateJobPostRequest : receives
JobService --> CreateJobPostCommand : uses
JobService --> "ServiceResult<JobListingsResponse>" : returns
JobService --> "ServiceResult<CreatedResponse>" : returns

JobPost --> ApplicationStatus : references
JobApplication --> ApplicationStatus : has
ApplicationFiles --> ApplicationFileType : has

JobPost "1" -- "0..*" JobApplication : has
JobApplication "1" -- "0..*" ApplicationFiles : contains

JobPostRepository --> JobPost : manages
JobApplicationRepository --> JobApplication : manages  
ApplicationFilesRepository --> ApplicationFiles : manages

@enduml